# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: eval_ad45335_dac.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ChannelType",
    "Channel",
    "ChannelConfig",
    "ChannelConfigReply",
    "Config",
    "ConfigReply",
    "DeflectionSetting",
    "DeflectorChannels",
    "Einzel",
    "GetStoredConfigRequest",
    "QuadrupoleBender",
    "QuadrupoleBenderChannels",
    "StackDeflector",
    "StoreConfigRequest",
    "StoredConfig",
    "Voltage",
    "VoltageReply",
    "DacStub",
    "DacBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server

betterproto2.check_compiler_version("0.4.0")


class ChannelType(betterproto2.Enum):
    AD45335 = 0


@dataclass(eq=False, repr=False)
class Channel(betterproto2.Message):
    port: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    type: "ChannelType" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: ChannelType(0)
    )


default_message_pool.register_message("eval_ad45335_dac", "Channel", Channel)


@dataclass(eq=False, repr=False)
class ChannelConfig(betterproto2.Message):
    pre_stack_deflector_channels: "DeflectorChannels | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    stack_einzel_channel: "Channel | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    post_stack_deflector_channels: "DeflectorChannels | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    horizontal_bender_einzel_channel: "Channel | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    quadrupole_bender_channels: "QuadrupoleBenderChannels | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "eval_ad45335_dac", "ChannelConfig", ChannelConfig
)


@dataclass(eq=False, repr=False)
class ChannelConfigReply(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "eval_ad45335_dac", "ChannelConfigReply", ChannelConfigReply
)


@dataclass(eq=False, repr=False)
class Config(betterproto2.Message):
    pre_stack_deflector: "StackDeflector | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    stack_einzel: "Einzel | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    post_stack_deflector: "StackDeflector | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    horizontal_bender_einzel: "Einzel | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    quadrupole_bender: "QuadrupoleBender | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("eval_ad45335_dac", "Config", Config)


@dataclass(eq=False, repr=False)
class ConfigReply(betterproto2.Message):
    success: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    message: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("eval_ad45335_dac", "ConfigReply", ConfigReply)


@dataclass(eq=False, repr=False)
class DeflectionSetting(betterproto2.Message):
    x: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)

    z: "float" = betterproto2.field(2, betterproto2.TYPE_DOUBLE)


default_message_pool.register_message(
    "eval_ad45335_dac", "DeflectionSetting", DeflectionSetting
)


@dataclass(eq=False, repr=False)
class DeflectorChannels(betterproto2.Message):
    x_minus_channel: "Channel | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    x_plus_channel: "Channel | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    z_minus_channel: "Channel | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    z_plus_channel: "Channel | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "eval_ad45335_dac", "DeflectorChannels", DeflectorChannels
)


@dataclass(eq=False, repr=False)
class Einzel(betterproto2.Message):
    focus: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    channel: "Channel | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("eval_ad45335_dac", "Einzel", Einzel)


@dataclass(eq=False, repr=False)
class GetStoredConfigRequest(betterproto2.Message):
    uuid: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "eval_ad45335_dac", "GetStoredConfigRequest", GetStoredConfigRequest
)


@dataclass(eq=False, repr=False)
class QuadrupoleBender(betterproto2.Message):
    bend: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)

    channels: "QuadrupoleBenderChannels | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "eval_ad45335_dac", "QuadrupoleBender", QuadrupoleBender
)


@dataclass(eq=False, repr=False)
class QuadrupoleBenderChannels(betterproto2.Message):
    bend_ions_plus_channel: "Channel | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    bend_ions_minus_channel: "Channel | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "eval_ad45335_dac", "QuadrupoleBenderChannels", QuadrupoleBenderChannels
)


@dataclass(eq=False, repr=False)
class StackDeflector(betterproto2.Message):
    deflection_setting: "DeflectionSetting | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    channels: "DeflectorChannels | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )

    dead_zone: "float" = betterproto2.field(3, betterproto2.TYPE_DOUBLE)

    sensitivity: "float" = betterproto2.field(4, betterproto2.TYPE_DOUBLE)

    locked: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)


default_message_pool.register_message(
    "eval_ad45335_dac", "StackDeflector", StackDeflector
)


@dataclass(eq=False, repr=False)
class StoreConfigRequest(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "eval_ad45335_dac", "StoreConfigRequest", StoreConfigRequest
)


@dataclass(eq=False, repr=False)
class StoredConfig(betterproto2.Message):
    timestamp: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Unix timestamp in milliseconds
    """

    name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    uuid: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    config: "Config | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message("eval_ad45335_dac", "StoredConfig", StoredConfig)


@dataclass(eq=False, repr=False)
class Voltage(betterproto2.Message):
    voltage: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)


default_message_pool.register_message("eval_ad45335_dac", "Voltage", Voltage)


@dataclass(eq=False, repr=False)
class VoltageReply(betterproto2.Message):
    wattage: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)


default_message_pool.register_message("eval_ad45335_dac", "VoltageReply", VoltageReply)


class DacStub:
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def send_voltage(self, message: "Voltage") -> "VoltageReply":
        return self._channel.unary_unary(
            "/eval_ad45335_dac.DAC/SendVoltage",
            Voltage.SerializeToString,
            VoltageReply.FromString,
        )(message)

    def send_channel_config(self, message: "ChannelConfig") -> "ChannelConfigReply":
        return self._channel.unary_unary(
            "/eval_ad45335_dac.DAC/SendChannelConfig",
            ChannelConfig.SerializeToString,
            ChannelConfigReply.FromString,
        )(message)

    def send_complete_config(self, message: "Config") -> "ConfigReply":
        return self._channel.unary_unary(
            "/eval_ad45335_dac.DAC/SendCompleteConfig",
            Config.SerializeToString,
            ConfigReply.FromString,
        )(message)

    def store_config(self, message: "StoreConfigRequest") -> "StoredConfig":
        return self._channel.unary_unary(
            "/eval_ad45335_dac.DAC/StoreConfig",
            StoreConfigRequest.SerializeToString,
            StoredConfig.FromString,
        )(message)

    def get_config(self, message: "GetStoredConfigRequest") -> "StoredConfig":
        return self._channel.unary_unary(
            "/eval_ad45335_dac.DAC/GetConfig",
            GetStoredConfigRequest.SerializeToString,
            StoredConfig.FromString,
        )(message)


class DacBase(ServiceBase):
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    async def send_voltage(self, message: "Voltage") -> "VoltageReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_channel_config(
        self, message: "ChannelConfig"
    ) -> "ChannelConfigReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_complete_config(self, message: "Config") -> "ConfigReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def store_config(self, message: "StoreConfigRequest") -> "StoredConfig":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_config(self, message: "GetStoredConfigRequest") -> "StoredConfig":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_send_voltage(
        self, stream: "grpclib.server.Stream[Voltage, VoltageReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_voltage(request)
        await stream.send_message(response)

    async def __rpc_send_channel_config(
        self, stream: "grpclib.server.Stream[ChannelConfig, ChannelConfigReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_channel_config(request)
        await stream.send_message(response)

    async def __rpc_send_complete_config(
        self, stream: "grpclib.server.Stream[Config, ConfigReply]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_complete_config(request)
        await stream.send_message(response)

    async def __rpc_store_config(
        self, stream: "grpclib.server.Stream[StoreConfigRequest, StoredConfig]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.store_config(request)
        await stream.send_message(response)

    async def __rpc_get_config(
        self, stream: "grpclib.server.Stream[GetStoredConfigRequest, StoredConfig]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_config(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/eval_ad45335_dac.DAC/SendVoltage": grpclib.const.Handler(
                self.__rpc_send_voltage,
                grpclib.const.Cardinality.UNARY_UNARY,
                Voltage,
                VoltageReply,
            ),
            "/eval_ad45335_dac.DAC/SendChannelConfig": grpclib.const.Handler(
                self.__rpc_send_channel_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                ChannelConfig,
                ChannelConfigReply,
            ),
            "/eval_ad45335_dac.DAC/SendCompleteConfig": grpclib.const.Handler(
                self.__rpc_send_complete_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                Config,
                ConfigReply,
            ),
            "/eval_ad45335_dac.DAC/StoreConfig": grpclib.const.Handler(
                self.__rpc_store_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                StoreConfigRequest,
                StoredConfig,
            ),
            "/eval_ad45335_dac.DAC/GetConfig": grpclib.const.Handler(
                self.__rpc_get_config,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStoredConfigRequest,
                StoredConfig,
            ),
        }
